<?phpnamespace App\Http\Controllers\Admin;use App\Http\Controllers\Controller;use App\Modules\Products\DatatableTransformer;use App\Modules\Products\Exporter\ProductCsv;use App\Modules\Products\ProductRepository;use Exception;use Illuminate\Http\Request;use Input;use Optimait\Laravel\Exceptions\ApplicationException;use Yajra\DataTables\Facades\DataTables;use Sonnenglas\AmazonMws\AmazonProductInfo;class ProductsController extends Controller{    private $products;    public function __construct(ProductRepository $productRepository)    {        $this->products = $productRepository;    }    /*     * Display a listing of the resource.     * GET /productproducts     *     * @return Response     */    public function index()    {        if (\Request::ajax()) {            return $this->getList();        }        return sysView('products.index');    }    public function getList(Request $request)    {        $products = $this->products->getForDatatable($request->all());        return Datatables::of($products)            /*->filter(function ($q) use ($request) {                $searchData = $request->all();                if (@$searchData['min'] != '') {                    $q->where('cost', '>=', $searchData['min']);                }                if (@$searchData['max'] != '') {                    $q->where('cost', '<=', $searchData['max']);                }            })*/            ->orderColumn('sales', '-sales $1')            ->setTransformer(new DatatableTransformer)            ->make(true);    }    public function create()    {        return sysView('products.create');    }    /*     * Store a newly created resource in storage.     * POST /products     *     * @return Response     */    public function store()    {        $this->products->validator->with(Input::all())->isValid();        $data = Input::all();        if ($this->products->createProduct($data)) {            return response()->json(array(                'notification' => ReturnNotification(array('success' => 'Created Successfully')),                'redirect' => sysRoute('products.index')            ));        }        throw new ApplicationException('Cannot be added at the moment');    }    /**     * Display the specified resource.     * GET /products/{id}     *     * @param  int $id     * @return Response     */    public function show($id)    {        $product = $this->products->requireById(decryptIt($id));        $amz = new AmazonProductInfo("store1");        $amz->setASINs($product->asin);        $amz->fetchLowestOffer();        $az_product = $amz->getProduct();        $data = $az_product[0]->getData();        $number_of_prime_sellers = 0;        foreach ($data['LowestOfferListings'] as $offer)        {            if ($offer['Qualifiers']['FulfillmentChannel'] == 'Amazon') {                $number_of_prime_sellers++;            }        }        if ($number_of_prime_sellers == 0)        {            $number_of_prime_sellers = 1;        }        $quantity_buy_in = ($product->sales / 4) * (1 / $number_of_prime_sellers);        if ($number_of_prime_sellers <= 4 && $number_of_prime_sellers > 0)        {            if ($product->number_of_packs == 1 && $quantity_buy_in >= 50 && $product->gross_profit_fba >= 1)            {                $status = "Go";            } else if ($product->number_of_packs > 1 && $quantity_buy_in >= 10 && $product->gross_roi > 0.05)            {                $status = "Go";            } else {                $status = "No Go";            }        }else if ($number_of_prime_sellers > 4 && $quantity_buy_in > 50 && $product->gross_profit_fba >= 1)        {            $status = "Go";        } else {            $status = "No Go";        }        $product->number_of_prime_sellers = $number_of_prime_sellers;        $product->quantity_buy_in = $quantity_buy_in;        $product->save();        $additional_data = array('number_of_prime_sellers' => $number_of_prime_sellers, 'quantity_buy_in' => $quantity_buy_in, 'status' => $status);        return sysView('products.show', compact('product', 'additional_data'));    }    /**     * Show the form for editing the specified resource.     * GET /products/{id}/edit     *     * @param  int $id     * @return Response     */    public function edit($id)    {        $product = $this->products->requireById(decryptIt($id));        return sysView('products.edit', compact('product'));    }    /**     * Update the specified resource in storage.     * PUT /products/{id}     *     * @param  int $id     * @return Response     */    public function update($id)    {        $id = decryptIt($id);        $this->products->validator->with(Input::all())->setDefault('edit')->isValid();        $data = Input::all();        if ($this->products->updateProduct($id, $data)) {            return response()->json(array(                'notification' => ReturnNotification(array('success' => 'Product Info Saved Successfully')),                'redirect' => sysRoute('products.index')            ));        }    }    public function destroy($id)    {        //    }    public function markPO(Request $request)    {        $id = $request->input('id');        $status = $request->input('status');        $reason = $request->input('reason');        $this->products->markPO($id, $status, $reason);    }    public function getDelete($id)    {        if ($this->products->deleteProduct(decryptIt($id))) {            echo 1;        } else {            throw new Exception('Cannot delete Product at the moment');        }    }    public function bulkActions()    {        if (!Input::get('ids')) {            throw new ApplicationException("Invalid Request");        }        $ids = Input::get('ids');        switch (Input::get('action')) {            case 'bulk-delete':                $this->bulkDeleteAction($ids);                break;        }        return redirect()->back()->with(['success' => 'Action Completed']);    }    public function bulkDeleteAction($ids)    {        $this->products->deleteIn($ids);    }    public function import(Request $request)    {        $this->products->validator->setDefault('import')->with($request->all())->isValid();        $destinationPath = public_path() . '/uploads/files/';        $file_temp = $request->file('file');        $extension = $file_temp->getClientOriginalExtension() ?: 'csv';        $safeName = str_random(10) . '.' . $extension;        $header = NULL;        $data = array();        $file_temp->move($destinationPath, $safeName);        if (($handle = fopen($destinationPath . $safeName, 'r')) !== FALSE)        {            while(($row = fgetcsv($handle, 0, ",")) !== FALSE)            {                if (!$header)                {                    $header = $row;                } else {                    $data[] = array_combine($header, $row);                }            }            fclose($handle);        }        \DB::beginTransaction();        try {            if ($request->get('type') == 'new') {                $this->products->deleteAll();            }            foreach ($data as $row) {                $this->products->importProduct($row);            }            \DB::commit();            return redirect()->back()->with(['success' => 'Imported Successfully.']);        } catch (Exception $e) {            \DB::rollBack();            dd($e);            throw new ApplicationException("Cannot Import.");        }    }    public function export(ProductCsv $exporter)    {        $products = $this->products->getPaginated(Input::all(), null, Input::get('orderBy', 'created_at'), Input::get('orderType', 'DESC'));        return $exporter->setName('Results')->setHeadings([            'SN', 'Title', 'Amazon Title', 'Number of packs', 'Brand', 'Asin', 'Amazon Upc Ean', 'Upc Ean', 'Amazon Box Buy Price', 'Net After Fba', 'Cost', 'Pack Cost', 'Gross Profit FBA', 'Gross Roi', 'Sales per month', 'Sales rank', 'Sales rank 30 days', 'Sales rank 90 days', 'Buybox Win', 'Weight', 'Number of Sellers', 'Number of Prime Seller', 'Weekly Quantity Buy in', 'PO Status'        ])->export($products);    }}