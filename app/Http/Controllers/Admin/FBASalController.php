<?phpnamespace App\Http\Controllers\Admin;use App\Http\Controllers\Controller;use App\Modules\Products\DatatableTransformer;use App\Modules\Products\Exporter\ProductCsv;use App\Modules\Products\ProductRepository;use App\Modules\Products\ProductValidator;use App\Modules\Products\Product;use Exception;use Illuminate\Http\Request;use Input;use Optimait\Laravel\Exceptions\ApplicationException;use Yajra\DataTables\Facades\DataTables;use Sonnenglas\AmazonMws\AmazonProductInfo;class FBASalController extends Controller{    public function __construct(Product $product, ProductValidator $productValidator)    {        $this->model = $product;        $this->validator = $productValidator;    }    public function index()    {        if (\Request::ajax()) {            return $this->getList();        }        return sysView('fbasal.index');    }    public function getList(Request $request)    {        $products = $this->products->getForDatatable($request->all());        return Datatables::of($products)            /*->filter(function ($q) use ($request) {                $searchData = $request->all();                if (@$searchData['min'] != '') {                    $q->where('cost', '>=', $searchData['min']);                }                if (@$searchData['max'] != '') {                    $q->where('cost', '<=', $searchData['max']);                }            })*/            ->setTransformer(new DatatableTransformer)            ->make(true);    }    public function import(Request $request)    {        $this->products->validator->setDefault('import')->with($request->all())->isValid();        $destinationPath = public_path() . '/uploads/files/';        $file_temp = $request->file('file');        $extension = $file_temp->getClientOriginalExtension() ?: 'csv';        $safeName = str_random(10) . '.' . $extension;        $header = NULL;        $data = array();        $file_temp->move($destinationPath, $safeName);        if (($handle = fopen($destinationPath . $safeName, 'r')) !== FALSE)        {            while(($row = fgetcsv($handle, 0, ",")) !== FALSE)            {                if (!$header)                {                    $header = $row;                } else {                    $data[] = array_combine($header, $row);                }            }            fclose($handle);        }        \DB::beginTransaction();        try {            if ($request->get('type') == 'new') {                $this->products->deleteAll();            }            foreach ($data as $row) {                $this->products->importProduct($row);            }            \DB::commit();            return redirect()->back()->with(['success' => 'Imported Successfully.']);        } catch (Exception $e) {            \DB::rollBack();            dd($e);            throw new ApplicationException("Cannot Import.");        }    }    public function export(ProductCsv $exporter)    {        $products = $this->products->getPaginated(Input::all(), null, Input::get('orderBy', 'created_at'), Input::get('orderType', 'DESC'));        return $exporter->setName('Results')->setHeadings([            'SN', 'Title', 'Amazon Title', 'Number of packs', 'Brand', 'Asin', 'Amazon Upc Ean', 'Upc Ean', 'Amazon Box Buy Price',            'Net After Fba', 'Cost', 'Pack Cost', 'Gross Profit FBA', 'Gross Roi', 'Sales per month', 'Sales rank', 'Sales rank 30 days', 'Sales rank 90 days', 'Buybox Win', 'Weight', 'Number of Prime Seller', 'PO Status'        ])->export($products);    }}