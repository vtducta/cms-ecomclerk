<?phpnamespace App\Modules\Products;use App\Modules\Setting;use Optimait\Laravel\Exceptions\ApplicationException;use Optimait\Laravel\Repos\EloquentRepository;use Optimait\Laravel\Traits\UploaderTrait;use Symfony\Component\Routing\Exception\ResourceNotFoundException;class ProductRepository extends EloquentRepository{    use UploaderTrait;    public $validator;    protected $insertedId;    protected $optionsView;    /**     * ProductRepository constructor.     * @param Product $product     * @param ProductValidator $productValidator     */    public function __construct(Product $product, ProductValidator $productValidator)    {        $this->model = $product;        $this->validator = $productValidator;    }    /**     * @param array $searchData     * @param int $items     * @param string $orderBy     * @param string $orderType     * @return mixed     */    public function getPaginated($searchData = [], $items = 10, $orderBy = 'order_id', $orderType = 'DESC')    {        $model = $this->model->where(function ($q) use ($searchData) {            if (@$searchData['min'] != '') {                $q->where('cost', '>=', $searchData['min']);            }            if (@$searchData['max'] != '') {                $q->where('cost', '<=', $searchData['max']);            }        })->orderBy($orderBy, $orderType);        if (!is_null($items)) {            return $model->paginate($items);        }        return $model->get();    }    /**     * @param array $searchData     * @param string $orderBy     * @param string $orderType     * @return mixed     */    public function getForDatatable($searchData = [], $orderBy = 'id', $orderType = 'DESC')    {        $model = $this->model->where(function ($q) use ($searchData) {            if (@$searchData['min'] != '') {                $q->where('gross_profit_fba', '>=', $searchData['min']);            }            if (@$searchData['max'] != '') {                $q->where('gross_profit_fba', '<=', $searchData['max']);            }            if (@$searchData['gross_min'] != '') {                $q->where('gross_roi', '>=', $searchData['gross_min']);            }            if (@$searchData['gross_max'] != '') {                $q->where('gross_roi', '<=', $searchData['gross_max']);            }        });        return $model;    }    /**     * get the products for the provided ids     *     * @param array $ids     * @return array|\Illuminate\Database\Eloquent\Collection|static[]     */    public function getIn(array $ids)    {        return $this->model->whereIn('id', $ids)->get();    }    /**     * @return mixed     */    public function getInsertedId()    {        return $this->insertedId;    }    /*     * @param $name the name used to check the duplicate record in the db     * @return int     */    /**     * @param $name     * @param array $id     * @throws ApplicationException     */    public function checkDuplicateProducts($name, $id = [])    {        if ($this->model->where('name', $name)->whereNotIn('id', $id)->count()) {            throw new ApplicationException('Product already exists');        }    }    /**     * @param $id     * @return bool     */    public function deleteProduct($id)    {        $product = $this->getById($id);        if (is_null($product)) {            throw new ResourceNotFoundException('Product Not Found');        }        if ($product->selfDestruct()) {            // print_r(DB::getQueryLog());            return true;        }        return false;    }    /**     * @param $product     * @param $filterData     * @param int $items     * @return mixed     */    public function getDataFor($product, $filterData, $items = 50)    {        return $product->data()->where(function ($q) use ($filterData) {            if (@$filterData['date_from'] != '') {                $q->whereRaw(\DB::raw("DATE(created_at) >= '" . $filterData['date_from'] . "'"));            }            if (@$filterData['date_to'] != '') {                $q->whereRaw(\DB::raw("DATE(created_at) <= '" . $filterData['date_to'] . "'"));            }        })->paginate($items);    }    /**     * @return mixed     */    public function deleteAll()    {        return $this->model->where('id', '>', 0)->delete();    }    /**     * @param $data     */    public function importProduct($data)    {        //dd($data);        $product = $this->model->firstOrCreate(['asin' => $data['ASIN']]);        $data['net_after_fba'] = @$data['FBAcalculated'];        $product->title = $data['title'];        if (isset($data['AmazonTitle']))            $product->amazon_title = $data['AmazonTitle'];        $product->cost = floatval(str_replace("$", "", $data['offerPriceformattedPrice']));        $product->brand = $data['brand'];        $product->amazon_upc_ean = $data['AmazonUPC'];        //$product->upc_ean = $data['UPC_EAN'];        $product->amazon_buy_box_price = floatval(str_replace("$", "", $data['BuyBoxPrice']));        $product->buybox_win = $data['BuyBox'];        $product->net_after_fba = floatval(str_replace("$", "", $data['net_after_fba']));        $product->number_of_sellers = $data['TotalNew'];        $product->weight = $data['Weight'];        $product->sales_rank = $data['SalesRank'];        $product->sales_rank_30 = $data['average_rank30'];        $product->sales_rank_90 = $data['average_rank90'];        $product->reviews = $data['reviews'];        $product->ratings = $data['rating'];        $product->sales = $data['EstimatedMonthlySales'];        $product->gross_profit_fba = floatval(str_replace("$", "", $data['GrossProfit']));        $product->gross_roi = intval($data['GrossROI']);        $product->number_of_packs = $data['units'];        //$product->calculate();        $product->save();    }    /**     * @param int $item     * @return mixed     */    public function getNoPrimeProducts($item = 20)    {        return $this->model->whereNull('is_eligible_for_prime')->limit($item)->get();    }    /**     * @param $id     * @param $status     * @param null $reason     */    public function markPO($id, $status, $reason = null)    {        $product = $this->model->find($id);        $product->po_status = $status;        $product->reason = $reason;        $product->save();    }} 